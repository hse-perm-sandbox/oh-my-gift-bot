import sqlite3
import datetime
from typing import Dict, List, Optional, Tuple
from src.config import settings


class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞"""
    def __init__(self):
        self.conn = self.get_db_connection()
        self.init_db()

    def get_db_connection(self):
        return sqlite3.connect(settings.DATABASE_PATH, check_same_thread=False)

    def init_db(self):
        cursor = self.conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS birthdays (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            name TEXT,
            date TEXT,
            notes TEXT DEFAULT '',
            wishes TEXT DEFAULT '',
            gifts TEXT DEFAULT '',
            UNIQUE(chat_id, name)
        )''')

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ gifts (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        try:
            cursor.execute("ALTER TABLE birthdays ADD COLUMN gifts TEXT DEFAULT ''")
        except sqlite3.OperationalError:
            pass

        # –¢–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS holidays (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            name TEXT,
            date TEXT,
            notes TEXT DEFAULT '',
            UNIQUE(chat_id, name)
        )''')

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS global_holidays (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            date TEXT,
            description TEXT DEFAULT '',
            UNIQUE(name)
        )''')

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        cursor.execute('''
                CREATE TABLE IF NOT EXISTS notification_settings (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER,
                    event_type TEXT,
                    notify_on_day INTEGER DEFAULT 1,
                    notify_one_day_before INTEGER DEFAULT 1,
                    notify_one_week_before INTEGER DEFAULT 1,
                    UNIQUE(chat_id, event_type)
                )''')


        default_holidays = [
            ("–ù–æ–≤—ã–π –≥–æ–¥", "01.01", "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! üéÑ‚ú®"),
            ("–†–æ–∂–¥–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–æ–≤–æ", "07.01", "–° –†–æ–∂–¥–µ—Å—Ç–≤–æ–º –•—Ä–∏—Å—Ç–æ–≤—ã–º! üåü"),
            ("–°—Ç–∞—Ä—ã–π –ù–æ–≤—ã–π –≥–æ–¥", "14.01", "–°–æ –°—Ç–∞—Ä—ã–º –ù–æ–≤—ã–º –≥–æ–¥–æ–º! üéâ"),
            ("–ö—Ä–µ—â–µ–Ω–∏–µ –ì–æ—Å–ø–æ–¥–Ω–µ", "19.01", "–° –ö—Ä–µ—â–µ–Ω–∏–µ–º –ì–æ—Å–ø–æ–¥–Ω–∏–º! ‚ùÑÔ∏èüôè"),
            ("–î–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "14.02", "–° –î–Ω—ë–º —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞! üíñ"),
            ("–î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞", "23.02", "–° –î–Ω—ë–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞! üéñÔ∏è"),
            ("–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å", "08.03", "–° 8 –ú–∞—Ä—Ç–∞! üíê"),
            ("–ü—Ä–∞–∑–¥–Ω–∏–∫ –í–µ—Å–Ω—ã –∏ –¢—Ä—É–¥–∞", "01.05", "–° –ü—Ä–∞–∑–¥–Ω–∏–∫–æ–º –í–µ—Å–Ω—ã –∏ –¢—Ä—É–¥–∞! üå∏"),
            ("–î–µ–Ω—å –ü–æ–±–µ–¥—ã", "09.05", "–° –î–Ω—ë–º –ü–æ–±–µ–¥—ã! üá∑üá∫üéñÔ∏è"),
            ("–î–µ–Ω—å –†–æ—Å—Å–∏–∏", "12.06", "–° –î–Ω—ë–º –†–æ—Å—Å–∏–∏! üá∑üá∫"),
            ("–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –¥–µ–Ω—å –∑–∞—â–∏—Ç—ã –¥–µ—Ç–µ–π", "01.06", "–° –î–Ω—ë–º –∑–∞—â–∏—Ç—ã –¥–µ—Ç–µ–π! üëßüë¶"),
            ("–î–µ–Ω—å –∑–Ω–∞–Ω–∏–π", "01.09", "–° –î–Ω—ë–º –∑–Ω–∞–Ω–∏–π! üìö‚úèÔ∏è"),
            ("–î–µ–Ω—å —É—á–∏—Ç–µ–ª—è", "05.10", "–° –î–Ω—ë–º —É—á–∏—Ç–µ–ª—è! üçéüìñ"),
            ("–î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞", "04.11", "–° –î–Ω—ë–º –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞! ü§ù"),
        ]

        for name, date, desc in default_holidays:
            try:
                cursor.execute('''
                INSERT OR IGNORE INTO global_holidays (name, date, description)
                VALUES (?, ?, ?)''', (name, date, desc))
            except sqlite3.IntegrityError:
                pass

        self.conn.commit()

    def init_notification_settings(self, chat_id: int):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        cursor = self.conn.cursor()
        event_types = ['birthday', 'holiday', 'global_holiday']
        for event_type in event_types:
            try:
                cursor.execute('''
                    INSERT OR IGNORE INTO notification_settings (chat_id, event_type, notify_on_day, notify_one_day_before, notify_one_week_before)
                    VALUES (?, ?, 1, 1, 1)
                ''', (chat_id, event_type))
            except sqlite3.Error:
                pass
        self.conn.commit()

    def get_notification_settings(self, chat_id: int, event_type: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏–π"""
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT notify_on_day, notify_one_day_before, notify_one_week_before
            FROM notification_settings
            WHERE chat_id = ? AND event_type = ?
        ''', (chat_id, event_type))
        result = cursor.fetchone()
        if result:
            return {
                'notify_on_day': result[0],
                'notify_one_day_before': result[1],
                'notify_one_week_before': result[2]
            }
        return None

    def update_notification_settings(self, chat_id: int, event_type: str, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏–π"""
        try:
            cursor = self.conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            current_settings = self.get_notification_settings(chat_id, event_type)
            if not current_settings:
                current_settings = {
                    'notify_on_day': 1,
                    'notify_one_day_before': 1,
                    'notify_one_week_before': 1
                }

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            for key, value in kwargs.items():
                if key in current_settings:
                    current_settings[key] = value

            cursor.execute('''
                INSERT OR REPLACE INTO notification_settings 
                (chat_id, event_type, notify_on_day, notify_one_day_before, notify_one_week_before)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                chat_id,
                event_type,
                current_settings['notify_on_day'],
                current_settings['notify_one_day_before'],
                current_settings['notify_one_week_before']
            ))

            self.conn.commit()
            return True
        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False

    def add_event(self, chat_id: int, name: str, date: datetime.date, notes: str = "",
                 wishes: str = "", event_type: str = 'birthday') -> bool:
        try:
            if event_type == 'birthday':
                self.conn.execute('''
                INSERT INTO birthdays (chat_id, name, date, notes, wishes) 
                VALUES (?, ?, ?, ?, ?)''', (chat_id, name, date.strftime('%Y-%m-%d'), notes, wishes))
            else:
                self.conn.execute('''
                INSERT INTO holidays (chat_id, name, date, notes) 
                VALUES (?, ?, ?, ?)''', (chat_id, name, date.strftime('%Y-%m-%d'), notes))
            self.conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False

    def get_event(self, chat_id: int, name: str, event_type: str = 'birthday') -> Optional[Dict]:
        table = 'birthdays' if event_type == 'birthday' else 'holidays'
        if event_type == 'birthday':
            cursor = self.conn.execute(f'''
            SELECT name, date, notes, wishes, gifts FROM {table} 
            WHERE chat_id = ? AND name = ?''', (chat_id, name))
            result = cursor.fetchone()
            if result:
                return {
                    "name": result[0],
                    "date": datetime.datetime.strptime(result[1], '%Y-%m-%d').date(),
                    "notes": result[2],
                    "wishes": result[3],
                    "gifts": result[4]
                }
        else:
            cursor = self.conn.execute(f'''
            SELECT name, date, notes FROM {table} 
            WHERE chat_id = ? AND name = ?''', (chat_id, name))
            result = cursor.fetchone()
            if result:
                return {
                    "name": result[0],
                    "date": datetime.datetime.strptime(result[1], '%Y-%m-%d').date(),
                    "notes": result[2]
                }
        return None

    def get_all_events(self, chat_id: int, event_type: str = 'birthday') -> Dict[str, datetime.date]:
        table = 'birthdays' if event_type == 'birthday' else 'holidays'
        cursor = self.conn.execute(f'SELECT name, date FROM {table} WHERE chat_id = ?', (chat_id,))
        return {name: datetime.datetime.strptime(date, '%Y-%m-%d').date()
                for name, date in cursor.fetchall()}

    def update_event(self, chat_id: int, name: str, date: datetime.date = None,
                     notes: str = None, wishes: str = None, gifts: str = None,
                     event_type: str = 'birthday') -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
        try:
            updates = []
            params = []

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if date is not None:
                updates.append("date = ?")
                params.append(date.strftime('%Y-%m-%d'))

            if notes is not None:
                updates.append("notes = ?")
                params.append(notes)

            if wishes is not None and event_type == 'birthday':
                updates.append("wishes = ?")
                params.append(wishes)

            if gifts is not None and event_type == 'birthday':
                updates.append("gifts = ?")
                params.append(gifts)

            if not updates:
                return False

            params.extend([chat_id, name])
            table = 'birthdays' if event_type == 'birthday' else 'holidays'
            query = f"UPDATE {table} SET {', '.join(updates)} WHERE chat_id = ? AND name = ?"
            cursor = self.conn.execute(query, params)
            self.conn.commit()
            return cursor.rowcount > 0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            return False

    def delete_event(self, chat_id: int, name: str, event_type: str = 'birthday') -> bool:
        table = 'birthdays' if event_type == 'birthday' else 'holidays'
        cursor = self.conn.execute(f'DELETE FROM {table} WHERE chat_id = ? AND name = ?', (chat_id, name))
        self.conn.commit()
        return cursor.rowcount > 0

    def get_global_holidays(self) -> List[Tuple[str, datetime.date, str]]:
        cursor = self.conn.execute('SELECT name, date, description FROM global_holidays')
        return [(name, datetime.datetime.strptime(date, '%d.%m').date(), desc)
                for name, date, desc in cursor.fetchall()]

    def __del__(self):
        self.conn.close()