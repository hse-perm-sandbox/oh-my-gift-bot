import html
from typing import Dict, Any, Optional
from telebot import types, TeleBot
import datetime
from src.database.database import Database
from src.services.api_services import AIService


class Handlers:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    def __init__(self, bot: TeleBot, db: Database, ai_service: AIService):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
        self.bot = bot
        self.db = db
        self.ai_service = ai_service
        self.user_data: Dict[int, Dict[str, Any]] = {}

    def escape_html(self, text: Optional[str]) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if text is None:
            return ""
        return html.escape(text)

    # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    def setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        @self.bot.message_handler(commands=['start'])
        def send_welcome(message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è")
            button2 = types.KeyboardButton('–ü—Ä–∞–∑–¥–Ω–∏–∫–∏')
            button3 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
            button4 = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
            markup.row(button1, button2)
            markup.row(button3, button4)
            self.bot.send_message(
                message.chat.id,
                f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤.',
                reply_markup=markup
            )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"
        @self.bot.message_handler(func=lambda message: message.text == '–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è')
        def show_birthdays_menu(message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è")
            button2 = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è')
            button3 = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup.row(button1, button2)
            markup.row(button3)
            self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏"
        @self.bot.message_handler(func=lambda message: message.text == '–ü—Ä–∞–∑–¥–Ω–∏–∫–∏')
        def show_holidays_menu(message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏"""
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫")
            button2 = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤')
            button3 = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤')
            button4 = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup.row(button1, button2)
            markup.row(button3, button4)
            self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        @self.bot.message_handler(func=lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
        def show_settings_menu(message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è')
            button2 = types.KeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏—á–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö')
            button3 = types.KeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö')
            button4 = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup.row(button1, button2)
            markup.row(button3, button4)
            self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=markup)


        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–∏—Å–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        @self.bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è')
        def show_birthdays_list(message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
            self.show_event_list(message, 'birthday')

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        @self.bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è')
        def add_birthday_start(message):
            """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
            msg = self.bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –î–î.–ú–ú"
            )
            self.bot.register_next_step_handler(msg, lambda m: self.process_add_event(m, 'birthday'))

        @self.bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫')
        def add_holiday_start(message):
            """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞"""
            msg = self.bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç—É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ –î–î.–ú–ú"
            )
            self.bot.register_next_step_handler(msg, lambda m: self.process_add_event(m, 'holiday'))

        @self.bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤')
        def show_holidays_list(message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
            self.show_event_list(message, 'holiday')

        @self.bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤')
        def show_global_holidays(message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
            holidays = self.db.get_global_holidays()
            if not holidays:
                self.bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
                return

            text = "üìÖ <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:</b>\n\n"
            for name, date, desc in sorted(holidays, key=lambda x: (x[1].month, x[1].day)):
                safe_name = self.escape_html(name)
                safe_desc = self.escape_html(desc) if desc else ""
                text += f"üéâ <b>{safe_name}</b> - {date.strftime('%d.%m')}\n"
                if safe_desc:
                    text += f"   {safe_desc}\n"
                text += "\n"

            self.bot.send_message(message.chat.id, text, parse_mode='HTML')

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        @self.bot.message_handler(func=lambda message: message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
        def send_help(message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞"""
            help_text = """
üìå <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>

–Ø –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞—é –æ –Ω–∏—Ö –∑–∞—Ä–∞–Ω–µ–µ.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1, 7 –¥–Ω–µ–π –∏ –≤ –¥–µ–Ω—å —Å–æ–±—ã—Ç–∏—è
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- –ü—Ä–æ—Ñ–∏–ª–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏, –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–¥–∞—Ä–∫–∏
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –∏–¥–µ–π –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–µ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
https://drive.google.com/file/d/1vWW2xOe9dFCfBCGBaMvCsvZBe01v6gQ7/view?usp=sharing
–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:
https://t.me/holidaysarewaiting
"""
            self.bot.send_message(
                message.chat.id,
                help_text,
                parse_mode='HTML',
                disable_web_page_preview=True
            )


        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è"
        @self.bot.message_handler(func=lambda message: message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è')
        def show_settings_birthday_menu(message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
            self.show_notification_settings_menu(message, 'birthday')

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏—á–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö"
        @self.bot.message_handler(func=lambda message: message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏—á–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö')
        def show_settings_personal_holidays_menu(message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ª–∏—á–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
            self.show_notification_settings_menu(message, 'holiday')

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö"
        @self.bot.message_handler(func=lambda message: message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö')
        def show_settings_global_holidays_menu(message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
            self.show_notification_settings_menu(message, 'global_holiday')

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        @self.bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
        def back_to_main(message):
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è")
            button2 = types.KeyboardButton('–ü—Ä–∞–∑–¥–Ω–∏–∫–∏')
            button3 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
            button4 = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
            markup.row(button1, button2)
            markup.row(button3, button4)
            self.bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_notification_'))
        def toggle_notification(call):
            """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤–∫–ª/–≤—ã–∫–ª) –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
            try:
                print(f"–ü–æ–ª—É—á–µ–Ω—ã callback_data: {call.data}")

                parts = call.data.split('_')
                print(f"–†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏: {parts}")

                if len(parts) < 4 or parts[0] != 'toggle' or parts[1] != 'notification':
                    print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –∏–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å: {call.data}")
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã")
                    return

                if parts[2] == 'global' and len(parts) >= 5:
                    event_type = 'global_holiday'
                    setting = '_'.join(parts[4:])
                else:
                    event_type = parts[2]
                    setting = '_'.join(parts[3:])
                print(f"event_type: {event_type}, setting: {setting}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ event_type –∏ setting
                valid_event_types = ['birthday', 'holiday', 'global_holiday']
                valid_settings = ['notify_on_day', 'notify_one_day_before', 'notify_one_week_before']
                if event_type not in valid_event_types:
                    print(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π event_type: {event_type}, callback_data: {call.data}")
                    self.bot.answer_callback_query(call.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è")
                    return
                if setting not in valid_settings:
                    print(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting}, callback_data: {call.data}")
                    self.bot.answer_callback_query(call.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
                    return

                chat_id = call.message.chat.id

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                settings = self.db.get_notification_settings(chat_id, event_type)
                if not settings:
                    settings = {'notify_on_day': 1, 'notify_one_day_before': 1, 'notify_one_week_before': 1}
                    self.db.update_notification_settings(chat_id, event_type, **settings)
                print(f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {settings}")

                # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                new_value = 1 if settings.get(setting, 0) == 0 else 0
                update_data = {setting: new_value}
                success = self.db.update_notification_settings(chat_id, event_type, **update_data)

                if not success:
                    print(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: chat_id={chat_id}, event_type={event_type}, setting={setting}")
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                    return

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                updated_settings = self.db.get_notification_settings(chat_id, event_type)
                if not updated_settings:
                    print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: chat_id={chat_id}, event_type={event_type}")
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return
                print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {updated_settings}")

                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
                event_name = {
                    'birthday': '–î–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è',
                    'holiday': '–õ–∏—á–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤',
                    'global_holiday': '–ì–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤'
                }[event_type]

                markup = types.InlineKeyboardMarkup()
                markup.row(
                    types.InlineKeyboardButton(
                        f"–í –¥–µ–Ω—å —Å–æ–±—ã—Ç–∏—è {'‚úÖ' if updated_settings['notify_on_day'] else '‚ùå'}",
                        callback_data=f"toggle_notification_{event_type}_notify_on_day"
                    )
                )
                markup.row(
                    types.InlineKeyboardButton(
                        f"–ó–∞ 1 –¥–µ–Ω—å {'‚úÖ' if updated_settings['notify_one_day_before'] else '‚ùå'}",
                        callback_data=f"toggle_notification_{event_type}_notify_one_day_before"
                    )
                )
                markup.row(
                    types.InlineKeyboardButton(
                        f"–ó–∞ –Ω–µ–¥–µ–ª—é {'‚úÖ' if updated_settings['notify_one_week_before'] else '‚ùå'}",
                        callback_data=f"toggle_notification_{event_type}_notify_one_week_before"
                    )
                )

                text = f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {event_name}:"

                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    self.bot.edit_message_text(
                        text,
                        chat_id=chat_id,
                        message_id=call.message.message_id,
                        reply_markup=markup
                    )
                    self.bot.answer_callback_query(call.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}, callback_data={call.data}")
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é")
            except Exception as e:
                print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ toggle_notification: {e}, callback_data={call.data}")
                self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('birthday_'))
        def show_birthday_profile(call):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
            self.show_event_profile(call, 'birthday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('holiday_'))
        def show_holiday_profile(call):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞"""
            self.show_event_profile(call, 'holiday')

        @self.bot.callback_query_handler(func=lambda call: call.data == 'back_to_birthday_list')
        def back_to_birthday_list(call):
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
            self.back_to_event_list(call, 'birthday')

        @self.bot.callback_query_handler(func=lambda call: call.data == 'back_to_holiday_list')
        def back_to_holiday_list(call):
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞"""
            self.back_to_event_list(call, 'holiday')

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('edit_birthday_'))
        def edit_birthday_start(call):
            """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
            self.edit_event_start(call, 'birthday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('edit_holiday_'))
        def edit_holiday_start(call):
            """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞"""
            self.edit_event_start(call, 'holiday')

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('add_note_birthday_'))
        def add_birthday_note_start(call):
            """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∫ –¥–Ω—é —Ä–æ–∂–¥–µ–Ω–∏—è"""
            self.add_note_start(call, 'birthday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('add_note_holiday_'))
        def add_holiday_note_start(call):
            """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∫ –ø—Ä–∞–∑–¥–Ω–∏–∫—É"""
            self.add_note_start(call, 'holiday')

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è)
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('add_wish_birthday_'))
        def add_wish_start(call):
            """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
            self.add_wish_start(call)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è)
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('add_gift_birthday_'))
        def add_gift_start(call):
            """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤"""
            self.add_gift_start(call)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('delete_birthday_'))
        def delete_birthday_confirm(call):
            """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
            self.delete_event_confirm(call, 'birthday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('delete_holiday_'))
        def delete_holiday_confirm(call):
            """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞"""
            self.delete_event_confirm(call, 'holiday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_birthday_'))
        def delete_birthday_execute(call):
            """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
            self.delete_event_execute(call, 'birthday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_holiday_'))
        def delete_holiday_execute(call):
            """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
            self.delete_event_execute(call, 'holiday')

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ —á–µ—Ä–µ–∑ AI
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('generate_gift_'))
        def generate_gift(call):
            """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤"""
            name = call.data.replace('generate_gift_', '')
            self.user_data[call.from_user.id] = {'action': 'generate_gift', 'name': name}

            msg = self.bot.send_message(
                call.message.chat.id,
                f"–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {name} (–≤–æ–∑—Ä–∞—Å—Ç, —Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ç.–¥.), "
                "—á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤:"
            )
            self.bot.register_next_step_handler(msg, self.process_gift_info)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('use_generated_gift_'))
        def use_generated_gift(call):
            """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤"""
            name = call.data.replace('use_generated_gift_', '')
            user_id = call.from_user.id
            data = self.user_data.get(user_id, {})

            if 'generated_gifts' in data:
                if self.db.update_event(
                    call.message.chat.id,
                    data['name'],
                    gifts=data['generated_gifts'],
                    event_type='birthday'
                ):
                    self.bot.answer_callback_query(call.id, "–ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    self.show_event_profile(call, 'birthday')
                else:
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤")
            else:
                self.bot.answer_callback_query(call.id, "–ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('manual_gift_'))
        def manual_gift_input(call):
            """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤"""
            name = call.data.replace('manual_gift_', '')
            self.user_data[call.from_user.id] = {'action': 'add_gift_birthday', 'name': name}

            msg = self.bot.send_message(
                call.message.chat.id,
                f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è {name}:"
            )
            self.bot.register_next_step_handler(msg, self.process_add_gift)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('generate_wish_'))
        def generate_wish(call):
            """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
            name = call.data.replace('generate_wish_', '')
            self.user_data[call.from_user.id] = {'action': 'generate_wish', 'name': name}

            msg = self.bot.send_message(
                call.message.chat.id,
                f"–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {name} (–≤–æ–∑—Ä–∞—Å—Ç, —Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ç.–¥.), "
                "—á—Ç–æ–±—ã —è –º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ:"
            )
            self.bot.register_next_step_handler(msg, self.process_wish_info)


        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('use_generated_wish_'))
        def use_generated_wish(call):
            """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ"""
            name = call.data.replace('use_generated_wish_', '')
            user_id = call.from_user.id
            data = self.user_data.get(user_id, {})

            if 'generated_wish' in data:
                if self.db.update_event(
                    call.message.chat.id,
                    data['name'],
                    wishes=data['generated_wish'],
                    event_type='birthday'
                ):
                    self.bot.answer_callback_query(call.id, "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
                    self.show_event_profile(call, 'birthday')
                else:
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è")
            else:
                self.bot.answer_callback_query(call.id, "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('manual_wish_'))
        def manual_wish_input(call):
            """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
            name = call.data.replace('manual_wish_', '')
            self.user_data[call.from_user.id] = {'action': 'add_wish_birthday', 'name': name}

            msg = self.bot.send_message(
                call.message.chat.id,
                f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {name}:"
            )
            self.bot.register_next_step_handler(msg, self.process_add_wish)

            try:
                self.bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    def process_add_event(self, message, event_type='birthday'):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è (–¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è/–ø—Ä–∞–∑–¥–Ω–∏–∫–∞)"""
        try:
            parts = message.text.rsplit(' ', 1)
            if len(parts) != 2:
                raise ValueError

            name = parts[0]
            date = datetime.datetime.strptime(parts[1] + ".2000", "%d.%m.%Y").date()

            if self.db.add_event(message.chat.id, name, date, event_type=event_type):
                event_name = "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è" if event_type == 'birthday' else "–ü—Ä–∞–∑–¥–Ω–∏–∫"
                self.bot.send_message(message.chat.id, f"{event_name} {name} –¥–æ–±–∞–≤–ª–µ–Ω!")
                self.db.init_notification_settings(message.chat.id)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            else:
                self.bot.send_message(message.chat.id, f"{name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
        except ValueError:
            event_name = "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è" if event_type == 'birthday' else "–ø—Ä–∞–∑–¥–Ω–∏–∫"
            msg = self.bot.send_message(
                message.chat.id,
                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ò–º—è –î–î.–ú–ú –¥–ª—è {event_name}"
            )
            self.bot.register_next_step_handler(msg, lambda m: self.process_add_event(m, event_type))

    def edit_event_start(self, call, event_type='birthday'):
        name = call.data.replace(f'edit_{event_type}_', '')
        self.user_data[call.from_user.id] = {'action': f'edit_{event_type}', 'name': name}

        msg = self.bot.send_message(
            call.message.chat.id,
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú:"
        )
        self.bot.register_next_step_handler(msg, lambda m: self.process_edit_event(m, event_type))

    def process_edit_event(self, message, event_type='birthday'):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è"""
        try:
            date = datetime.datetime.strptime(message.text + ".2000", "%d.%m.%Y").date()
            user_id = message.from_user.id
            data = self.user_data.get(user_id, {})

            if self.db.update_event(message.chat.id, data['name'], date=date, event_type=event_type):
                self.bot.send_message(message.chat.id, "–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            else:
                self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã.")

            if user_id in self.user_data:
                del self.user_data[user_id]
        except ValueError:
            msg = self.bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–î–î.–ú–ú):")
            self.bot.register_next_step_handler(msg, lambda m: self.process_edit_event(m, event_type))

    def add_note_start(self, call, event_type='birthday'):
        name = call.data.replace(f'add_note_{event_type}_', '')
        self.user_data[call.from_user.id] = {'action': f'add_note_{event_type}', 'name': name}

        msg = self.bot.send_message(
            call.message.chat.id,
            f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É:"
        )
        self.bot.register_next_step_handler(msg, lambda m: self.process_add_note(m, event_type))

    def process_add_note(self, message, event_type='birthday'):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫ —Å–æ–±—ã—Ç–∏—é"""
        user_id = message.from_user.id
        data = self.user_data.get(user_id, {})

        if self.db.update_event(message.chat.id, data['name'], notes=message.text, event_type=event_type):
            self.bot.send_message(message.chat.id, "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.")

        if user_id in self.user_data:
            del self.user_data[user_id]

    def add_wish_start(self, call):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
        name = call.data.replace('add_wish_birthday_', '')
        self.user_data[call.from_user.id] = {'action': 'add_wish_birthday', 'name': name}

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"generate_wish_{name}"),
        )
        markup.row(
            types.InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_wish_{name}")
        )
        markup.row(
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"birthday_{name}")
        )

        self.bot.edit_message_text(
            f"–•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {name} –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é?",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    def show_notification_settings_menu(self, message, event_type, message_id=None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏–π"""
        chat_id = message.chat.id
        settings = self.db.get_notification_settings(chat_id, event_type)
        if not settings:
            settings = {'notify_on_day': 1, 'notify_one_day_before': 1, 'notify_one_week_before': 1}
            self.db.update_notification_settings(chat_id, event_type, **settings)

        event_name = {
            'birthday': '–î–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è',
            'holiday': '–õ–∏—á–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤',
            'global_holiday': '–ì–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤'
        }[event_type]

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton(
                f"–í –¥–µ–Ω—å —Å–æ–±—ã—Ç–∏—è {'‚úÖ' if settings['notify_on_day'] else '‚ùå'}",
                callback_data=f"toggle_notification_{event_type}_notify_on_day"
            )
        )
        markup.row(
            types.InlineKeyboardButton(
                f"–ó–∞ 1 –¥–µ–Ω—å {'‚úÖ' if settings['notify_one_day_before'] else '‚ùå'}",
                callback_data=f"toggle_notification_{event_type}_notify_one_day_before"
            )
        )
        markup.row(
            types.InlineKeyboardButton(
                f"–ó–∞ –Ω–µ–¥–µ–ª—é {'‚úÖ' if settings['notify_one_week_before'] else '‚ùå'}",
                callback_data=f"toggle_notification_{event_type}_notify_one_week_before"
            )
        )

        text = f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {event_name}:"

        try:
            if message_id:
                self.bot.edit_message_text(
                    text,
                    chat_id,
                    message_id,
                    reply_markup=markup
                )
            else:
                self.bot.send_message(chat_id, text, reply_markup=markup)
        except Exception as e:
            print(f"Error in show_notification_settings: {e}")
            self.bot.send_message(chat_id, text, reply_markup=markup)

    def add_gift_start(self, call):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤"""
        name = call.data.replace('add_gift_birthday_', '')
        self.user_data[call.from_user.id] = {'action': 'add_gift_birthday', 'name': name}

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏", callback_data=f"generate_gift_{name}"),
        )
        markup.row(
            types.InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_gift_{name}")
        )
        markup.row(
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"birthday_{name}")
        )

        self.bot.edit_message_text(
            f"–•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è {name} –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é?",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    def process_gift_info(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤"""
        user_id = message.from_user.id
        if user_id not in self.user_data or self.user_data[user_id]['action'] != 'generate_gift':
            self.bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        name = self.user_data[user_id]['name']
        info = message.text

        self.bot.send_chat_action(message.chat.id, 'typing')

        try:
            gift_ideas = self.ai_service.generate_gift_ideas(name, info)

            self.user_data[user_id] = {
                'action': 'add_gift_birthday',
                'name': name,
                'generated_gifts': gift_ideas
            }

            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∏–¥–µ–∏", callback_data=f"use_generated_gift_{name}"),
            )
            markup.row(
                types.InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ", callback_data=f"generate_gift_{name}"),
                types.InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_gift_{name}")
            )

            self.bot.send_message(
                message.chat.id,
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è {name}:\n\n{gift_ideas}\n\n"
                "–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ?",
                reply_markup=markup
            )

            try:
                self.bot.delete_message(message.chat.id, message.message_id - 1)
            except:
                pass

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
            self.bot.send_message(
                message.chat.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

    def process_wish_info(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
        user_id = message.from_user.id
        if user_id not in self.user_data or self.user_data[user_id]['action'] != 'generate_wish':
            self.bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        name = self.user_data[user_id]['name']
        info = message.text

        self.bot.send_chat_action(message.chat.id, 'typing')

        try:
            congratulation = self.ai_service.generate_congratulation(name, info)

            self.user_data[user_id] = {
                'action': 'add_wish_birthday',
                'name': name,
                'generated_wish': congratulation
            }

            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ",
                                           callback_data=f"use_generated_wish_{name}"),
            )
            markup.row(
                types.InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ", callback_data=f"generate_wish_{name}"),
                types.InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_wish_{name}")
            )

            self.bot.send_message(
                message.chat.id,
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {name}:\n\n{congratulation}\n\n"
                "–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ?",
                reply_markup=markup
            )

            try:
                self.bot.delete_message(message.chat.id, message.message_id - 1)
            except:
                pass

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            self.bot.send_message(
                message.chat.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

    def process_add_gift(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤"""
        user_id = message.from_user.id
        data = self.user_data.get(user_id, {})

        if self.db.update_event(message.chat.id, data['name'], gifts=message.text, event_type='birthday'):
            self.bot.send_message(message.chat.id, "–ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        else:
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤.")

        if user_id in self.user_data:
            del self.user_data[user_id]

    def process_add_wish(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
        user_id = message.from_user.id
        data = self.user_data.get(user_id, {})

        if self.db.update_event(message.chat.id, data['name'], wishes=message.text, event_type='birthday'):
            self.bot.send_message(message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        else:
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.")

        if user_id in self.user_data:
            del self.user_data[user_id]

    def delete_event_confirm(self, call, event_type='birthday'):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        name = call.data.replace(f'delete_{event_type}_', '')
        event_name = "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è" if event_type == 'birthday' else "–ø—Ä–∞–∑–¥–Ω–∏–∫"

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_delete_{event_type}_{name}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"{event_type}_{name}")
        )

        self.bot.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {event_name} {name}?",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    def delete_event_execute(self, call, event_type='birthday'):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        name = call.data.replace(f'confirm_delete_{event_type}_', '')
        if self.db.delete_event(call.message.chat.id, name, event_type):
            self.bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–æ")
            self.back_to_event_list(call, event_type)
        else:
            self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

    def back_to_event_list(self, call, event_type='birthday'):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π"""
        events = self.db.get_all_events(call.message.chat.id, event_type)
        event_name = "–¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è" if event_type == 'birthday' else "–ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"

        if not events:
            self.bot.answer_callback_query(call.id, f"–ù–µ—Ç {event_name}")
            return

        markup = types.InlineKeyboardMarkup()
        for name in events.keys():
            markup.add(types.InlineKeyboardButton(name, callback_data=f"{event_type}_{name}"))

        try:
            if event_name == "–¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è":
                self.bot.edit_message_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=markup
            )
            else:
                self.bot.edit_message_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫:",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def show_event_list(self, message_or_call, event_type='birthday'):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π (–¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è/–ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤)"""
        if isinstance(message_or_call, types.Message):
            chat_id = message_or_call.chat.id
        else:
            chat_id = message_or_call.message.chat.id

        events = self.db.get_all_events(chat_id, event_type)
        event_name = "–¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è" if event_type == 'birthday' else "–ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"

        if not events:
            if isinstance(message_or_call, types.Message):
                self.bot.send_message(chat_id, f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö {event_name}.")
            else:
                self.bot.edit_message_text(
                    f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö {event_name}.",
                    chat_id,
                    message_or_call.message.message_id
                )
            return

        markup = types.InlineKeyboardMarkup()
        for name in events.keys():
            markup.add(types.InlineKeyboardButton(name, callback_data=f"{event_type}_{name}"))

        if event_type == 'birthday':
            if isinstance(message_or_call, types.Message):
                self.bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:", reply_markup=markup)
            else:
                self.bot.edit_message_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:",
                    chat_id,
                    message_or_call.message.message_id,
                    reply_markup=markup
                )
        else:
            if isinstance(message_or_call, types.Message):
                self.bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫:", reply_markup=markup)
            else:
                self.bot.edit_message_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫:",
                    chat_id,
                    message_or_call.message.message_id,
                    reply_markup=markup
                )

    def show_event_profile(self, call, event_type='birthday'):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–±—ã—Ç–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        name = call.data.replace(f'{event_type}_', '')
        profile = self.db.get_event(call.message.chat.id, name, event_type)
        event_name = "–¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è" if event_type == 'birthday' else "–ø—Ä–∞–∑–¥–Ω–∏–∫–∞"

        if not profile:
            self.bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        safe_name = self.escape_html(profile['name'])
        safe_notes = self.escape_html(profile['notes']) if profile['notes'] else "–Ω–µ—Ç"
        safe_wishes = self.escape_html(profile.get('wishes', '')) if profile.get('wishes') and event_type == 'birthday' else "–Ω–µ—Ç"
        safe_gifts = self.escape_html(profile.get('gifts', '')) if profile.get('gifts') and event_type == 'birthday' else "–Ω–µ—Ç"

        text = f"""
<b>–ü—Ä–æ—Ñ–∏–ª—å {event_name}</b>

{"üë§" if event_type == 'birthday' else "üéâ"} –ò–º—è: {safe_name}
üìÖ –î–∞—Ç–∞: {profile['date'].strftime('%d.%m')}

üìù –ó–∞–º–µ—Ç–∫–∏: {safe_notes}
"""
        if event_type == 'birthday':
            text += f"\nüíù –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ: {safe_wishes}"
            text += f"\nüéÅ –ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {safe_gifts}"

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{event_type}_{name}"),
            types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{event_type}_{name}")
        )
        markup.row(
            types.InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"add_note_{event_type}_{name}"),
        )
        if event_type == 'birthday':
            markup.row(
                types.InlineKeyboardButton("üíù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"add_wish_{event_type}_{name}"),
                types.InlineKeyboardButton("üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data=f"add_gift_{event_type}_{name}")
            )

        markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{event_type}_list"))

        try:
            self.bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            plain_text = f"–ü—Ä–æ—Ñ–∏–ª—å {event_name}\n\n"
            plain_text += f"–ò–º—è: {profile['name']}\n"
            plain_text += f"–î–∞—Ç–∞: {profile['date'].strftime('%d.%m')}\n"
            plain_text += f"–ó–∞–º–µ—Ç–∫–∏: {profile['notes'] if profile['notes'] else '–Ω–µ—Ç'}\n"
            if event_type == 'birthday':
                plain_text += f"–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ: {profile.get('wishes', '–Ω–µ—Ç')}\n"
                plain_text += f"–ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {profile.get('gifts', '–Ω–µ—Ç')}\n"

            self.bot.edit_message_text(
                plain_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )