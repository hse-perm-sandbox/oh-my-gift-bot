import telebot
from telebot import types
import datetime
import sqlite3
import time
import requests
import html
import threading
from src.config import settings


class EventProfile:
    def __init__(self, name, date, notes="", wishes="", gifts=""):
        self.name = name
        self.date = date
        self.notes = notes
        self.wishes = wishes
        self.gifts = gifts


class BirthdayBot:
    def __init__(self):
        self.bot = telebot.TeleBot(settings.TELEGRAM_TOKEN)
        self.user_data = {}
        self.init_db()
        self.setup_handlers()
        self.start_reminder_thread()

    def escape_html(self, text):
        if text is None:
            return ""
        return html.escape(text)

    def init_db(self):
        conn = self.get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS birthdays (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            name TEXT,
            date TEXT,
            notes TEXT DEFAULT '',
            wishes TEXT DEFAULT '',
            gifts TEXT DEFAULT '',
            UNIQUE(chat_id, name)
        )''')

        try:
            cursor.execute("ALTER TABLE birthdays ADD COLUMN gifts TEXT DEFAULT ''")
        except sqlite3.OperationalError:
            pass

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS holidays (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            name TEXT,
            date TEXT,
            notes TEXT DEFAULT '',
            UNIQUE(chat_id, name)
        )''')

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS global_holidays (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            date TEXT,
            description TEXT DEFAULT '',
            UNIQUE(name)
        )''')

        default_holidays = [
            ("–ù–æ–≤—ã–π –≥–æ–¥", "01.01", "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! üéÑ‚ú®"),
            ("–†–æ–∂–¥–µ—Å—Ç–≤–æ", "07.01", "–° –†–æ–∂–¥–µ—Å—Ç–≤–æ–º –•—Ä–∏—Å—Ç–æ–≤—ã–º! üåü"),
            ("–î–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "14.02", "–° –î–Ω—ë–º —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞! üíñ"),
            ("–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å", "08.03", "–° 8 –ú–∞—Ä—Ç–∞! üíê"),
            ("–î–µ–Ω—å –ü–æ–±–µ–¥—ã", "09.05", "–° –î–Ω—ë–º –ü–æ–±–µ–¥—ã! üéñÔ∏è"),
            ("–î–µ–Ω—å –†–æ—Å—Å–∏–∏", "12.06", "–° –î–Ω—ë–º –†–æ—Å—Å–∏–∏! üá∑üá∫"),
            ("–î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞", "04.11", "–° –î–Ω—ë–º –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞!"),
        ]

        for name, date, desc in default_holidays:
            try:
                cursor.execute('''
                INSERT OR IGNORE INTO global_holidays (name, date, description)
                VALUES (?, ?, ?)''', (name, date, desc))
            except sqlite3.IntegrityError:
                pass

        conn.commit()
        conn.close()

    def get_db_connection(self):
        return sqlite3.connect(settings.DATABASE_PATH, check_same_thread=False)

    def start_reminder_thread(self):
        reminder_thread = threading.Thread(target=self.check_reminders)
        reminder_thread.daemon = True
        reminder_thread.start()

    def add_event(self, chat_id, name, date, notes="", wishes="", event_type='birthday'):
        conn = self.get_db_connection()
        cursor = conn.cursor()
        try:
            if event_type == 'birthday':
                cursor.execute('''
                INSERT INTO birthdays (chat_id, name, date, notes, wishes) 
                VALUES (?, ?, ?, ?, ?)''', (chat_id, name, date.strftime('%Y-%m-%d'), notes, wishes))
            else:
                cursor.execute('''
                INSERT INTO holidays (chat_id, name, date, notes) 
                VALUES (?, ?, ?, ?)''', (chat_id, name, date.strftime('%Y-%m-%d'), notes))
            conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False
        finally:
            conn.close()

    def update_event(self, chat_id, name, date=None, notes=None, wishes=None, gifts=None, event_type='birthday'):
        conn = self.get_db_connection()
        cursor = conn.cursor()
        try:
            updates = []
            params = []

            if date is not None:
                updates.append("date = ?")
                params.append(date.strftime('%Y-%m-%d'))

            if notes is not None:
                updates.append("notes = ?")
                params.append(notes)

            if wishes is not None and event_type == 'birthday':
                updates.append("wishes = ?")
                params.append(wishes)

            if gifts is not None and event_type == 'birthday':
                updates.append("gifts = ?")
                params.append(gifts)

            if not updates:
                return False

            params.extend([chat_id, name])
            table = 'birthdays' if event_type == 'birthday' else 'holidays'
            query = f"UPDATE {table} SET {', '.join(updates)} WHERE chat_id = ? AND name = ?"
            cursor.execute(query, params)
            conn.commit()
            return cursor.rowcount > 0
        finally:
            conn.close()

    def get_event(self, chat_id, name, event_type='birthday'):
        conn = self.get_db_connection()
        cursor = conn.cursor()
        try:
            table = 'birthdays' if event_type == 'birthday' else 'holidays'
            if event_type == 'birthday':
                cursor.execute(f'''
                SELECT name, date, notes, wishes, gifts FROM {table} 
                WHERE chat_id = ? AND name = ?''', (chat_id, name))
                result = cursor.fetchone()
                if result:
                    return EventProfile(
                        name=result[0],
                        date=datetime.datetime.strptime(result[1], '%Y-%m-%d').date(),
                        notes=result[2],
                        wishes=result[3],
                        gifts=result[4]
                    )
            else:
                cursor.execute(f'''
                SELECT name, date, notes FROM {table} 
                WHERE chat_id = ? AND name = ?''', (chat_id, name))
                result = cursor.fetchone()
                if result:
                    return EventProfile(
                        name=result[0],
                        date=datetime.datetime.strptime(result[1], '%Y-%m-%d').date(),
                        notes=result[2]
                    )
            return None
        finally:
            conn.close()

    def get_all_events(self, chat_id, event_type='birthday'):
        conn = self.get_db_connection()
        cursor = conn.cursor()
        try:
            table = 'birthdays' if event_type == 'birthday' else 'holidays'
            cursor.execute(f'SELECT name, date FROM {table} WHERE chat_id = ?', (chat_id,))
            return {name: datetime.datetime.strptime(date, '%Y-%m-%d').date() for name, date in cursor.fetchall()}
        finally:
            conn.close()

    def delete_event(self, chat_id, name, event_type='birthday'):
        conn = self.get_db_connection()
        cursor = conn.cursor()
        try:
            table = 'birthdays' if event_type == 'birthday' else 'holidays'
            cursor.execute(f'DELETE FROM {table} WHERE chat_id = ? AND name = ?', (chat_id, name))
            conn.commit()
            return cursor.rowcount > 0
        finally:
            conn.close()

    def get_global_holidays(self):
        conn = self.get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('SELECT name, date, description FROM global_holidays')
            return [(name, datetime.datetime.strptime(date, '%d.%m').date(), desc)
                    for name, date, desc in cursor.fetchall()]
        finally:
            conn.close()

    def add_global_holiday(self, name, date, description=""):
        conn = self.get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('''
            INSERT OR IGNORE INTO global_holidays (name, date, description)
            VALUES (?, ?, ?)''', (name, date.strftime('%d.%m'), description))
            conn.commit()
            return cursor.rowcount > 0
        finally:
            conn.close()

    def check_reminders(self):
        while True:
            today = datetime.date.today()
            tomorrow = today + datetime.timedelta(days=1)
            week_later = today + datetime.timedelta(days=7)
            conn = self.get_db_connection()
            try:
                cursor = conn.cursor()
                cursor.execute('SELECT DISTINCT chat_id FROM birthdays UNION SELECT DISTINCT chat_id FROM holidays')
                chat_ids = [row[0] for row in cursor.fetchall()]

                for name, date, desc in self.get_global_holidays():
                    holiday_date = datetime.date(today.year, date.month, date.day)

                    if holiday_date == today:
                        for chat_id in chat_ids:
                            try:
                                self.bot.send_message(chat_id, f"üéâ –°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫: {name}!\n\n{desc}")
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                    elif holiday_date == tomorrow:
                        for chat_id in chat_ids:
                            try:
                                self.bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫ - {name}! üéâ")
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                    elif holiday_date == week_later:
                        for chat_id in chat_ids:
                            try:
                                self.bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ - {name}! üéâ")
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

                for event_type in ['birthday', 'holiday']:
                    for chat_id in chat_ids:
                        if event_type == 'birthday':
                            cursor.execute('SELECT name, date, wishes, notes FROM birthdays WHERE chat_id = ?',
                                           (chat_id,))
                        else:
                            cursor.execute('SELECT name, date, notes FROM holidays WHERE chat_id = ?', (chat_id,))

                        for row in cursor.fetchall():
                            if event_type == 'birthday':
                                name, date_str, wishes, notes = row
                            else:
                                name, date_str, notes = row
                                wishes = ""

                            event_date = datetime.datetime.strptime(date_str, '%Y-%m-%d').date()
                            event_date_this_year = datetime.date(today.year, event_date.month, event_date.day)

                            if event_date_this_year == today:
                                message = f"üéâ –°–µ–≥–æ–¥–Ω—è {'–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É' if event_type == 'birthday' else '–ø—Ä–∞–∑–¥–Ω–∏–∫:'} {name}!\n"
                                if wishes: message += f"\n–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ: {wishes}"
                                if notes: message += f"\n–ó–∞–º–µ—Ç–∫–∞: {notes}"
                                try:
                                    self.bot.send_message(chat_id, message)
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                            elif event_date_this_year == tomorrow:
                                try:
                                    self.bot.send_message(chat_id,
                                                          f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ {'–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É' if event_type == 'birthday' else '–ø—Ä–∞–∑–¥–Ω–∏–∫:'} {name}! üéâ")
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                            elif event_date_this_year == week_later:
                                try:
                                    self.bot.send_message(chat_id,
                                                          f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π {'–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É' if event_type == 'birthday' else '–ø—Ä–∞–∑–¥–Ω–∏–∫:'} {name}! üéâ")
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            finally:
                conn.close()

            time.sleep(3600)

    def process_add_event(self, message, event_type='birthday'):
        try:
            parts = message.text.rsplit(' ', 1)
            if len(parts) != 2:
                raise ValueError

            name = parts[0]
            date = datetime.datetime.strptime(parts[1] + ".2000", "%d.%m.%Y").date()

            if self.add_event(message.chat.id, name, date, event_type=event_type):
                event_name = "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è" if event_type == 'birthday' else "–ü—Ä–∞–∑–¥–Ω–∏–∫"
                self.bot.send_message(message.chat.id, f"{event_name} {name} –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                self.bot.send_message(message.chat.id, f"{name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
        except ValueError:
            event_name = "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è" if event_type == 'birthday' else "–ø—Ä–∞–∑–¥–Ω–∏–∫"
            msg = self.bot.send_message(
                message.chat.id,
                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ò–º—è –î–î.–ú–ú –¥–ª—è {event_name}"
            )
            self.bot.register_next_step_handler(msg, lambda m: self.process_add_event(m, event_type))

    def edit_event_start(self, call, event_type='birthday'):
        name = call.data.replace(f'edit_{event_type}_', '')
        self.user_data[call.from_user.id] = {'action': f'edit_{event_type}', 'name': name}

        msg = self.bot.send_message(
            call.message.chat.id,
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú:"
        )
        self.bot.register_next_step_handler(msg, lambda m: self.process_edit_event(m, event_type))

    def process_edit_event(self, message, event_type='birthday'):
        try:
            date = datetime.datetime.strptime(message.text + ".2000", "%d.%m.%Y").date()
            user_id = message.from_user.id
            data = self.user_data.get(user_id, {})

            if self.update_event(message.chat.id, data['name'], date=date, event_type=event_type):
                self.bot.send_message(message.chat.id, "–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            else:
                self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã.")

            if user_id in self.user_data:
                del self.user_data[user_id]
        except ValueError:
            msg = self.bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–î–î.–ú–ú):")
            self.bot.register_next_step_handler(msg, lambda m: self.process_edit_event(m, event_type))

    def add_note_start(self, call, event_type='birthday'):
        name = call.data.replace(f'add_note_{event_type}_', '')
        self.user_data[call.from_user.id] = {'action': f'add_note_{event_type}', 'name': name}

        msg = self.bot.send_message(
            call.message.chat.id,
            f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É:"
        )
        self.bot.register_next_step_handler(msg, lambda m: self.process_add_note(m, event_type))

    def process_add_note(self, message, event_type='birthday'):
        user_id = message.from_user.id
        data = self.user_data.get(user_id, {})

        if self.update_event(message.chat.id, data['name'], notes=message.text, event_type=event_type):
            self.bot.send_message(message.chat.id, "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.")

        if user_id in self.user_data:
            del self.user_data[user_id]

    def delete_event_confirm(self, call, event_type='birthday'):
        name = call.data.replace(f'delete_{event_type}_', '')
        event_name = "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è" if event_type == 'birthday' else "–ø—Ä–∞–∑–¥–Ω–∏–∫"

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_delete_{event_type}_{name}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"{event_type}_{name}")
        )

        self.bot.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {event_name} {name}?",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    def delete_event_execute(self, call, event_type='birthday'):
        name = call.data.replace(f'confirm_delete_{event_type}_', '')
        if self.delete_event(call.message.chat.id, name, event_type):
            self.bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–æ")
            self.back_to_event_list(call, event_type)
        else:
            self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

    def back_to_event_list(self, call, event_type='birthday'):
        events = self.get_all_events(call.message.chat.id, event_type)
        event_name = "–¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è" if event_type == 'birthday' else "–ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"

        if not events:
            self.bot.answer_callback_query(call.id, f"–ù–µ—Ç {event_name}")
            return

        markup = types.InlineKeyboardMarkup()
        for name in events.keys():
            markup.add(types.InlineKeyboardButton(name, callback_data=f"{event_type}_{name}"))

        try:
            self.bot.edit_message_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ {event_name[:-1]}:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def show_event_list(self, message_or_call, event_type='birthday'):
        if isinstance(message_or_call, types.Message):
            chat_id = message_or_call.chat.id
        else:
            chat_id = message_or_call.message.chat.id

        events = self.get_all_events(chat_id, event_type)
        event_name = "–¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è" if event_type == 'birthday' else "–ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"

        if not events:
            if isinstance(message_or_call, types.Message):
                self.bot.send_message(chat_id, f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö {event_name}.")
            else:
                self.bot.edit_message_text(
                    f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö {event_name}.",
                    chat_id,
                    message_or_call.message.message_id
                )
            return

        markup = types.InlineKeyboardMarkup()
        for name in events.keys():
            markup.add(types.InlineKeyboardButton(name, callback_data=f"{event_type}_{name}"))

        if event_type == 'birthday':
            if isinstance(message_or_call, types.Message):
                self.bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:", reply_markup=markup)
            else:
                self.bot.edit_message_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:",
                    chat_id,
                    message_or_call.message.message_id,
                    reply_markup=markup
                )
        else:
            if isinstance(message_or_call, types.Message):
                self.bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫:", reply_markup=markup)
            else:
                self.bot.edit_message_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫:",
                    chat_id,
                    message_or_call.message.message_id,
                    reply_markup=markup
                )

    def show_event_profile(self, call, event_type='birthday'):
        name = call.data.replace(f'{event_type}_', '')
        profile = self.get_event(call.message.chat.id, name, event_type)
        event_name = "–¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è" if event_type == 'birthday' else "–ø—Ä–∞–∑–¥–Ω–∏–∫–∞"

        if not profile:
            self.bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        safe_name = self.escape_html(profile.name)
        safe_notes = self.escape_html(profile.notes) if profile.notes else "–Ω–µ—Ç"
        safe_wishes = self.escape_html(profile.wishes) if profile.wishes and event_type == 'birthday' else "–Ω–µ—Ç"
        safe_gifts = self.escape_html(profile.gifts) if profile.gifts and event_type == 'birthday' else "–Ω–µ—Ç"

        text = f"""
<b>–ü—Ä–æ—Ñ–∏–ª—å {event_name}</b>

{"üë§" if event_type == 'birthday' else "üéâ"} –ò–º—è: {safe_name}
üìÖ –î–∞—Ç–∞: {profile.date.strftime('%d.%m')}

üìù –ó–∞–º–µ—Ç–∫–∏: {safe_notes}
"""
        if event_type == 'birthday':
            text += f"\nüíù –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ: {safe_wishes}"
            text += f"\nüéÅ –ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {safe_gifts}"

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{event_type}_{name}"),
            types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{event_type}_{name}")
        )
        markup.row(
            types.InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"add_note_{event_type}_{name}"),
        )
        if event_type == 'birthday':
            markup.row(
                types.InlineKeyboardButton("üíù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"add_wish_{event_type}_{name}"),
                types.InlineKeyboardButton("üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data=f"add_gift_{event_type}_{name}")
            )

        markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{event_type}_list"))

        try:
            self.bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            plain_text = f"–ü—Ä–æ—Ñ–∏–ª—å {event_name}\n\n"
            plain_text += f"–ò–º—è: {profile.name}\n"
            plain_text += f"–î–∞—Ç–∞: {profile.date.strftime('%d.%m')}\n"
            plain_text += f"–ó–∞–º–µ—Ç–∫–∏: {profile.notes if profile.notes else '–Ω–µ—Ç'}\n"
            if event_type == 'birthday':
                plain_text += f"–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ: {profile.wishes if profile.wishes else '–Ω–µ—Ç'}\n"
                plain_text += f"–ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {profile.gifts if profile.gifts else '–Ω–µ—Ç'}\n"

            self.bot.edit_message_text(
                plain_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )

    def generate_gift_ideas(self, name, info):
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {settings.API_KEY}"
        }

        prompt = f"–ù–µ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å–æ–≤, –≤—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤. –ü—Ä–∏–¥—É–º–∞–π 5 –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {name}." \
                 f"–£—á—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {info}. " \
                 f"–°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏–¥–µ–∏ —Å–ø–∏—Å–∫–æ–º."

        data = {
            "model": "deepseek-ai/DeepSeek-R1",
            "messages": [
                {
                    "role": "system",
                    "content": "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–¥–∞—Ä–∫–æ–≤."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "temperature": 0.7,
            "max_tokens": 1000
        }

        try:
            response = requests.post(settings.API_URL, headers=headers, json=data)
            if response.status_code == 200:
                result = response.json()
                return result['choices'][0]['message']['content'].split('</think>')[-1].strip()
            else:
                print(f"–û—à–∏–±–∫–∞ API: {response.status_code}, {response.text}")
                return f"–ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è {name}: –∫–Ω–∏–≥–∞, –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, —Ü–≤–µ—Ç—ã"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
            return f"–ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è {name}: –ø–∞—Ä—Ñ—é–º, –±–∏–ª–µ—Ç—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –≥–∞–¥–∂–µ—Ç"

    def process_gift_info(self, message):
        user_id = message.from_user.id
        if user_id not in self.user_data or self.user_data[user_id]['action'] != 'generate_gift':
            self.bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        name = self.user_data[user_id]['name']
        info = message.text

        self.bot.send_chat_action(message.chat.id, 'typing')

        try:
            gift_ideas = self.generate_gift_ideas(name, info)

            self.user_data[user_id] = {
                'action': 'add_gift_birthday',
                'name': name,
                'generated_gifts': gift_ideas
            }

            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∏–¥–µ–∏", callback_data=f"use_generated_gift_{name}"),
            )
            markup.row(
                types.InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ", callback_data=f"generate_gift_{name}"),
                types.InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_gift_{name}")
            )

            self.bot.send_message(
                message.chat.id,
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è {name}:\n\n{gift_ideas}\n\n–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ?",
                reply_markup=markup
            )

            try:
                self.bot.delete_message(message.chat.id, message.message_id - 1)
            except:
                pass

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
            self.bot.send_message(message.chat.id,
                                  "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    def generate_congratulation(self, name, info):
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {settings.API_KEY}"
        }

        prompt = f"–ù–µ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å–æ–≤, –≤—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ. –ü—Ä–∏–¥—É–º–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏ —Ç–µ–ø–ª–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {name}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ: {info}. " \
                 f"–°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º (4-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)."

        data = {
            "model": "deepseek-ai/DeepSeek-R1",
            "messages": [
                {
                    "role": "system",
                    "content": "–¢—ã –ø–∏—à–µ—à—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "temperature": 0.7,
            "max_tokens": 1000
        }

        try:
            response = requests.post(settings.API_URL, headers=headers, json=data)
            if response.status_code == 200:
                result = response.json()
                return result['choices'][0]['message']['content'].split('</think>')[-1].strip()
            else:
                print(f"–û—à–∏–±–∫–∞ API: {response.status_code}, {response.text}")
                return f"–î–æ—Ä–æ–≥–æ–π(–∞—è) {name}! –û—Ç –≤—Å–µ–π –¥—É—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –î–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ –ñ–µ–ª–∞—é —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ —É—Å–ø–µ—Ö–æ–≤ –≤–æ –≤—Å–µ—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö! üéÇüéÅ"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            return f"–î–æ—Ä–æ–≥–æ–π(–∞—è) {name}! –°–µ—Ä–¥–µ—á–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –î–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! üåü –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –ø—Ä–∏–Ω–µ—Å—ë—Ç –º–Ω–æ–≥–æ —Ä–∞–¥–æ—Å—Ç–∏ –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤! üéà"

    def process_wish_info(self, message):
        user_id = message.from_user.id
        if user_id not in self.user_data or self.user_data[user_id]['action'] != 'generate_wish':
            self.bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        name = self.user_data[user_id]['name']
        info = message.text

        self.bot.send_chat_action(message.chat.id, 'typing')

        try:
            congratulation = self.generate_congratulation(name, info)

            self.user_data[user_id] = {
                'action': 'add_wish_birthday',
                'name': name,
                'generated_wish': congratulation
            }

            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ",
                                           callback_data=f"use_generated_wish_{name}"),
            )
            markup.row(
                types.InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ", callback_data=f"generate_wish_{name}"),
                types.InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_wish_{name}")
            )

            self.bot.send_message(
                message.chat.id,
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {name}:\n\n{congratulation}\n\n–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ?",
                reply_markup=markup
            )

            try:
                self.bot.delete_message(message.chat.id, message.message_id - 1)
            except:
                pass

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            self.bot.send_message(message.chat.id,
                                  "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    def setup_handlers(self):
        @self.bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫')
        def add_holiday_start(message):
            msg = self.bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç—É –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ –î–î.–ú–ú"
            )
            self.bot.register_next_step_handler(msg, lambda m: self.process_add_event(m, 'holiday'))

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('add_gift_birthday_'))
        def add_gift_start(call):
            name = call.data.replace('add_gift_birthday_', '')
            self.user_data[call.from_user.id] = {'action': 'add_gift_birthday', 'name': name}

            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏", callback_data=f"generate_gift_{name}"),
            )
            markup.row(
                types.InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_gift_{name}")
            )
            markup.row(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"birthday_{name}")
            )

            self.bot.edit_message_text(
                f"–•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è {name} –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é?",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('generate_gift_'))
        def generate_gift(call):
            name = call.data.replace('generate_gift_', '')
            self.user_data[call.from_user.id] = {'action': 'generate_gift', 'name': name}

            msg = self.bot.send_message(
                call.message.chat.id,
                f"–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {name} (–≤–æ–∑—Ä–∞—Å—Ç, —Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ç.–¥.), —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤:"
            )
            self.bot.register_next_step_handler(msg, self.process_gift_info)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('use_generated_gift_'))
        def use_generated_gift(call):
            name = call.data.replace('use_generated_gift_', '')
            user_id = call.from_user.id
            data = self.user_data.get(user_id, {})

            if 'generated_gifts' in data:
                if self.update_event(call.message.chat.id, data['name'], gifts=data['generated_gifts'],
                                     event_type='birthday'):
                    self.bot.answer_callback_query(call.id, "–ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    self.show_event_profile(call, 'birthday')
                else:
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤")
            else:
                self.bot.answer_callback_query(call.id, "–ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('manual_gift_'))
        def manual_gift_input(call):
            name = call.data.replace('manual_gift_', '')
            self.user_data[call.from_user.id] = {'action': 'add_gift_birthday', 'name': name}

            msg = self.bot.send_message(
                call.message.chat.id,
                f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è {name}:"
            )
            self.bot.register_next_step_handler(msg, self.process_add_gift)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('add_wish_birthday_'))
        def add_wish_start(call):
            name = call.data.replace('add_wish_birthday_', '')
            self.user_data[call.from_user.id] = {'action': 'add_wish_birthday', 'name': name}

            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"generate_wish_{name}"),
            )
            markup.row(
                types.InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_wish_{name}")
            )
            markup.row(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"birthday_{name}")
            )

            self.bot.edit_message_text(
                f"–•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {name} –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é?",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('generate_wish_'))
        def generate_wish(call):
            name = call.data.replace('generate_wish_', '')
            self.user_data[call.from_user.id] = {'action': 'generate_wish', 'name': name}

            msg = self.bot.send_message(
                call.message.chat.id,
                f"–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {name} (–≤–æ–∑—Ä–∞—Å—Ç, —Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ç.–¥.), —á—Ç–æ–±—ã —è –º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ:"
            )
            self.bot.register_next_step_handler(msg, self.process_wish_info)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('use_generated_wish_'))
        def use_generated_wish(call):
            name = call.data.replace('use_generated_wish_', '')
            user_id = call.from_user.id
            data = self.user_data.get(user_id, {})

            if 'generated_wish' in data:
                if self.update_event(call.message.chat.id, data['name'], wishes=data['generated_wish'],
                                     event_type='birthday'):
                    self.bot.answer_callback_query(call.id, "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
                    self.show_event_profile(call, 'birthday')
                else:
                    self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è")
            else:
                self.bot.answer_callback_query(call.id, "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('manual_wish_'))
        def manual_wish_input(call):
            name = call.data.replace('manual_wish_', '')
            self.user_data[call.from_user.id] = {'action': 'add_wish_birthday', 'name': name}

            msg = self.bot.send_message(
                call.message.chat.id,
                f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {name}:"
            )
            self.bot.register_next_step_handler(msg, self.process_add_wish)

            try:
                self.bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass

        @self.bot.message_handler(commands=['start'])
        def send_welcome(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è")
            button2 = types.KeyboardButton('–ü—Ä–∞–∑–¥–Ω–∏–∫–∏')
            button3 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
            markup.row(button1, button2)
            markup.row(button3)
            self.bot.send_message(message.chat.id,
                                  f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤.',
                                  reply_markup=markup)

        @self.bot.message_handler(func=lambda message: message.text == '–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è')
        def show_birthdays_menu(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è")
            button2 = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è')
            button3 = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup.row(button1, button2)
            markup.row(button3)
            self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

        @self.bot.message_handler(func=lambda message: message.text == '–ü—Ä–∞–∑–¥–Ω–∏–∫–∏')
        def show_holidays_menu(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫")
            button2 = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤')
            button3 = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤')
            button4 = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup.row(button1, button2)
            markup.row(button3, button4)
            self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

        @self.bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è')
        def show_birthdays_list(message):
            self.show_event_list(message, 'birthday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('birthday_'))
        def show_birthday_profile(call):
            self.show_event_profile(call, 'birthday')

        @self.bot.callback_query_handler(func=lambda call: call.data == 'back_to_birthday_list')
        def back_to_birthday_list(call):
            self.back_to_event_list(call, 'birthday')

        @self.bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è')
        def add_birthday_start(message):
            msg = self.bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –î–î.–ú–ú"
            )
            self.bot.register_next_step_handler(msg, lambda m: self.process_add_event(m, 'birthday'))

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('edit_birthday_'))
        def edit_birthday_start(call):
            self.edit_event_start(call, 'birthday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('add_note_birthday_'))
        def add_birthday_note_start(call):
            self.add_note_start(call, 'birthday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('add_wish_birthday_'))
        def add_birthday_wish_start(call):
            self.add_wish_start(call)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('delete_birthday_'))
        def delete_birthday_confirm(call):
            self.delete_event_confirm(call, 'birthday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_birthday_'))
        def delete_birthday_execute(call):
            self.delete_event_execute(call, 'birthday')

        @self.bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤')
        def show_holidays_list(message):
            self.show_event_list(message, 'holiday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('holiday_'))
        def show_holiday_profile(call):
            self.show_event_profile(call, 'holiday')

        @self.bot.callback_query_handler(func=lambda call: call.data == 'back_to_holiday_list')
        def back_to_holiday_list(call):
            self.back_to_event_list(call, 'holiday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('edit_holiday_'))
        def edit_holiday_start(call):
            self.edit_event_start(call, 'holiday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('add_note_holiday_'))
        def add_holiday_note_start(call):
            self.add_note_start(call, 'holiday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('delete_holiday_'))
        def delete_holiday_confirm(call):
            self.delete_event_confirm(call, 'holiday')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_holiday_'))
        def delete_holiday_execute(call):
            self.delete_event_execute(call, 'holiday')

        @self.bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤')
        def show_global_holidays(message):
            holidays = self.get_global_holidays()
            if not holidays:
                self.bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
                return

            text = "üìÖ <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:</b>\n\n"
            for name, date, desc in sorted(holidays, key=lambda x: (x[1].month, x[1].day)):
                safe_name = self.escape_html(name)
                safe_desc = self.escape_html(desc) if desc else ""
                text += f"üéâ <b>{safe_name}</b> - {date.strftime('%d.%m')}\n"
                if safe_desc:
                    text += f"   {safe_desc}\n"
                text += "\n"

            self.bot.send_message(message.chat.id, text, parse_mode='HTML')

        @self.bot.message_handler(func=lambda message: message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
        def send_help(message):
            help_text = """
üìå <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>

–Ø –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞—é –æ –Ω–∏—Ö –∑–∞—Ä–∞–Ω–µ–µ.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1, 7 –¥–Ω–µ–π –∏ –≤ –¥–µ–Ω—å —Å–æ–±—ã—Ç–∏—è
- –ü—Ä–æ—Ñ–∏–ª–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏, –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–¥–∞—Ä–∫–∏
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –∏–¥–µ–π –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–µ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
https://drive.google.com/file/d/1vWW2xOe9dFCfBCGBaMvCsvZBe01v6gQ7/view?usp=sharing
–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:
https://t.me/holidaysarewaiting
"""
            self.bot.send_message(message.chat.id, help_text, parse_mode='HTML', disable_web_page_preview=True)

        @self.bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
        def back_to_main(message):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è")
            button2 = types.KeyboardButton('–ü—Ä–∞–∑–¥–Ω–∏–∫–∏')
            button3 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
            markup.row(button1, button2)
            markup.row(button3)
            self.bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

    def run(self):
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.bot.polling(none_stop=True, interval=0)